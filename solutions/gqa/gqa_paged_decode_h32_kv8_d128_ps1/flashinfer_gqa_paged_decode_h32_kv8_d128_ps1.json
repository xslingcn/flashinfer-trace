{
  "name": "flashinfer_gqa_paged_decode_h32_kv8_d128_ps1",
  "definition": "gqa_paged_decode_h32_kv8_d128_ps1",
  "description": "Solution using FlashInfer BatchDecodeWithPagedKVCacheWrapper API.",
  "author": "flashinfer",
  "spec": {
    "language": "Python",
    "target_hardware": [
      "NVIDIA_H100",
      "NVIDIA_H200",
      "NVIDIA_B200"
    ],
    "dependencies": [
      "flashinfer >= 0.2.8"
    ],
    "entry_point": "main.py::run",
    "build_commands": []
  },
  "sources": [
    {
      "path": "main.py",
      "content": "import torch\nimport flashinfer\n\n\ndef run(q, k_cache, v_cache, kv_indptr, kv_indices, sm_scale):\n    batch_size, num_qo_heads, head_dim = q.shape\n    num_pages, page_size, num_kv_heads, _ = k_cache.shape\n\n    assert page_size == 1\n\n    device = q.device\n\n    # Derive last_page_len for FlashInfer plan().\n    # For decode and page_size=1, each request should have at least one page.\n    pages_per_req = (kv_indptr[1:] - kv_indptr[:-1]).to(torch.int32)\n    if torch.any(pages_per_req <= 0):\n        raise ValueError(\n            \"Decode expects each request to have at least one page when page_size=1.\"\n        )\n    kv_last_page_len = torch.ones_like(pages_per_req, device=kv_indptr.device)\n\n    workspace = torch.empty(128 * 1024 * 1024, dtype=torch.uint8, device=device)\n\n    wrapper = flashinfer.decode.BatchDecodeWithPagedKVCacheWrapper(workspace, kv_layout=\"NHD\")\n\n    wrapper.plan(\n        indptr=kv_indptr,\n        indices=kv_indices,\n        last_page_len=kv_last_page_len,\n        num_qo_heads=num_qo_heads,\n        num_kv_heads=num_kv_heads,\n        head_dim=head_dim,\n        page_size=page_size,            # == 1\n        pos_encoding_mode=\"NONE\",\n        window_left=-1,\n        logits_soft_cap=0.0,\n        q_data_type=q.dtype,\n        kv_data_type=k_cache.dtype,\n        sm_scale=sm_scale,\n        non_blocking=True,\n    )\n\n    output, lse = wrapper.run(\n        q=q,\n        paged_kv_cache=(k_cache, v_cache),\n        return_lse=True,\n    )\n\n    return {\"output\": output, \"lse\": lse}"
    }
  ]
}