{
  "name": "mla_paged_decode_h16_ckv512_kpe64_ps1",
  "description": "Batch Multi-head Latent Attention (MLA) decode with paged KV cache. Captured from DeepSeek-V2/V3 models with tensor parallel size 8.",
  "type": "mla",
  "tags": [
    "stage:decode",
    "status:verified",
    "model:deepseek-v3",
    "model:deepseek-r1"
  ],
  "axes": {
    "batch_size": {
      "type": "var"
    },
    "num_qo_heads": {
      "type": "const",
      "value": 16
    },
    "head_dim_ckv": {
      "type": "const",
      "value": 512
    },
    "head_dim_kpe": {
      "type": "const",
      "value": 64
    },
    "page_size": {
      "type": "const",
      "value": 1
    },
    "num_pages": {
      "type": "var",
      "description": "Total number of allocated pages in the KV cache."
    },
    "len_indptr": {
      "type": "var",
      "description": "Length of kv_indptr array."
    },
    "num_kv_indices":{
      "type": "var",
      "description": "Total number of KV page indices."
    }
  },
  "constraints": [
    "len_indptr == batch_size + 1",
    "num_kv_indices == kv_indptr[-1].item()"
  ],
  "inputs": {
    "q_nope": {
      "shape": [
        "batch_size",
        "num_qo_heads",
        "head_dim_ckv"
      ],
      "dtype": "bfloat16",
      "description": "Query tensor without positional encoding component."
    },
    "q_pe": {
      "shape": [
        "batch_size",
        "num_qo_heads",
        "head_dim_kpe"
      ],
      "dtype": "bfloat16",
      "description": "Query positional encoding component."
    },
    "ckv_cache": {
      "shape": [
        "num_pages",
        "page_size",
        "head_dim_ckv"
      ],
      "dtype": "bfloat16",
      "description": "Compressed key-value cache."
    },
    "kpe_cache": {
      "shape": [
        "num_pages",
        "page_size",
        "head_dim_kpe"
      ],
      "dtype": "bfloat16",
      "description": "Key positional encoding cache."
    },
    "kv_indptr": {
      "shape": [
        "len_indptr"
      ],
      "dtype": "int32",
      "description": "KV page offsets for each sequence."
    },
    "kv_indices": {
      "shape": [
        "num_kv_indices"
      ],
      "dtype": "int32",
      "description": "Token indices for each page."
    },
    "sm_scale": {
      "shape": [],
      "dtype": "float32",
      "description": "Softmax scale (1/sqrt(head_dim_qk))."
    }
  },
  "outputs": {
    "output": {
      "shape": [
        "batch_size",
        "num_qo_heads",
        "head_dim_ckv"
      ],
      "dtype": "bfloat16"
    },
    "lse": {
      "shape": [
        "batch_size",
        "num_qo_heads"
      ],
      "dtype": "float32",
      "description": "The 2-based log-sum-exp of attention logits."
    }
  },
  "reference": "import math\nimport torch\n\n\n@torch.no_grad()\ndef run(q_nope, q_pe, ckv_cache, kpe_cache, kv_indptr, kv_indices, sm_scale):\n    batch_size, num_qo_heads, head_dim_ckv = q_nope.shape\n    head_dim_kpe = q_pe.shape[-1]\n    page_size = ckv_cache.shape[1]\n    len_indptr = kv_indptr.shape[0]\n    num_kv_indices = kv_indices.shape[0]\n\n    # Check constants\n    assert num_qo_heads == 16\n    assert head_dim_ckv == 512\n    assert head_dim_kpe == 64\n    assert page_size == 1\n\n    # Check constraints\n    assert len_indptr == batch_size + 1\n    assert num_kv_indices == kv_indptr[-1].item()\n\n    device = q_nope.device\n\n    Kc_all = ckv_cache.squeeze(1).to(torch.float32)  # [num_pages, head_dim_ckv]\n    Kp_all = kpe_cache.squeeze(1).to(torch.float32)  # [num_pages, head_dim_kpe]\n\n    output = torch.zeros(\n        (batch_size, num_qo_heads, head_dim_ckv), dtype=torch.bfloat16, device=device\n    )\n    lse = torch.full((batch_size, num_qo_heads), -float(\"inf\"), dtype=torch.float32, device=device)\n\n    for b in range(batch_size):\n        page_beg = int(kv_indptr[b].item())\n        page_end = int(kv_indptr[b + 1].item())\n\n        if page_beg >= page_end:\n            # No KV cache for this batch element\n            output[b].zero_()\n            continue\n\n        pages = kv_indices[page_beg:page_end]\n        # Derive kv_len from kv_indptr (for page_size=1, num_pages == num_tokens)\n        L_tokens = page_end - page_beg\n\n        if L_tokens <= 0 or pages.numel() == 0:\n            output[b].zero_()\n            continue\n\n        # Pages are token indices for page_size=1\n        tok_idx = pages[:L_tokens].to(torch.long)\n\n        Kc = Kc_all[tok_idx]  # [L_tokens, head_dim_ckv]\n        Kp = Kp_all[tok_idx]  # [L_tokens, head_dim_kpe]\n        qn = q_nope[b].to(torch.float32)  # [num_qo_heads, head_dim_ckv]\n        qp = q_pe[b].to(torch.float32)  # [num_qo_heads, head_dim_kpe]\n\n        logits = (qn @ Kc.T) + (qp @ Kp.T)  # [num_qo_heads, L_tokens]\n        logits_scaled = logits * sm_scale\n\n        # Compute 2-base LSE\n        lse[b] = torch.logsumexp(logits_scaled, dim=-1) / math.log(2.0)\n\n        attn = torch.softmax(logits_scaled, dim=-1)  # [num_qo_heads, L_tokens]\n        out = attn @ Kc  # [num_qo_heads, head_dim_ckv]\n        output[b] = out.to(torch.bfloat16)\n\n    return {\"output\": output, \"lse\": lse}"
}